create_package(tk_choose.dir(getwd()))
library(mypackage)
detach("package:mypackage", unload = TRUE)
remove.packages("mypackage", lib="~/R/x86_64-pc-linux-gnu-library/3.6")
getwd()
create_package()
devtools::create_package("plsoci")
library(devtools)
create_package("plsoci")
getwd()
library(devtools)
create_package("plsoci")
getwd()
quit()
ent
ent <- function(a,b) {
if (a == 0 || b == 0) {
return 0
ent <- function(a,b) {
if (a == 0 || b == 0) {
return (0)
}
return (-(a/(a+b)) * log(a/(a+b), 2) - (b/(a+b)) * log(b/(a+b), 2))
}
ent(1,0)
ent(1,1)
ent(1,2)
ent(2,2)
ent(2,3)
ent(2,1000)
ent(2,1)
ent(1,1)
quit()
ent(1,2)
quit()
facotrial(6)
factorial(6)
factorial(6) * choose(9,5)
choose(9,5)
2*8*7*6*5*4
13440*6
10*9*8*7*6*5 - 8*7*6*5*4*3 - 13440
10*9*8*7*6*5 - 8*7*6*5*4*3
quit()
6*6*4
quit()
choose(7,1)
choose(7,1) * choose(15,4)
choose(7,1) + choose(15,4)
permutate(6,5)
perm(6,5)
e(1,1)
ent(1,1)
clear
permutations(24,4)
quit
quit()
x <- (2+2*sqrt(2))
x
y <- sqrt(3+2*sqrt(2))
y
x/y
2+2*sqrt(2)
quit()
choose(10,5)
2*choose(10,5)
2*choose(10,5) + choose(10,6)
factorial(12)/factorial(6)
factorial(11)/factorial(5)
7*factorial(11)/factorial(5)
7*factorial(11)/factorial(6)
choose(5,3)
choose(7,3)
choose(11,6)
factorial(11)/(factorial(5))
factorial(11)/(factorial(6))
factorial(11)/factorial(5)
factorial(11)/factorial(7)
factorial(11)/factorial(8)
factorial(12)/factorial(6)
factorial(12)/factorial(7)
factorial(12)/factorial(8)
factorial(12)/factorial(9)
factorial(7)/factorial(6)
2*choose(11,6)-choose(10,6)
choose(12,4)
quit()
0.75*120
quit()
### tomo los datos...
rm(list=ls())
library(caret)
library(readr)
library(matrixcalc)
library(chemometrics)
FTIR_Spectra_instant_coffee <-  read_csv("data/chapter7/coffee.csv")
source("examples/chapter7/pls_matrices.R")
source("examples/chapter7/lineal_with_R.R")
Y=(t(FTIR_Spectra_instant_coffee[2,2:57]))
Y=as.factor(Y)
Y=as.numeric(Y)
setwd("~/PLSLib")
getwd
getwd()
#
#
### tomo los datos...
rm(list=ls())
library(caret)
library(readr)
library(matrixcalc)
library(chemometrics)
FTIR_Spectra_instant_coffee <-  read_csv("data/chapter7/coffee.csv")
source("examples/chapter7/pls_matrices.R")
source("examples/chapter7/lineal_with_R.R")
Y=(t(FTIR_Spectra_instant_coffee[2,2:57]))
Y=as.factor(Y)
Y=as.numeric(Y)
Y=Y-1
Y=matrix(Y,ncol=1)
xx=t(FTIR_Spectra_instant_coffee[3:288,2:57])
X=matrix(0,ncol=ncol(xx),nrow=nrow(xx))
for (i in 1:ncol(xx)){
for (j in 1:nrow(xx)){
X[j,i]=as.numeric(xx[j,i])
}
}
### Choose d with k=10 folds
Dmax=15
K=10
linear_error_pfc=NULL
linear_error_pls=NULL
linear_error_iso=NULL
set.seed(11)
for (d in 1:Dmax){
Y=c(Y)
aux=lineal.junto.small.R(X,Y,K,d)
#aux=lineal.junto.small.R.more.classes(X,Y,K,d)
li=(aux$predict_lineal_pls)
li_pfc=(aux$predict_lineal_PFC)
li_iso=(aux$predict_lineal_iso)
linear_error_pls[d]=mean((li-Y)^2)
linear_error_pfc[d]=mean((li_pfc-Y)^2)
linear_error_iso[d]=mean((li_iso-Y)^2)
}
d_pls=which(linear_error_pls==min(linear_error_pls))
d_pfc=which(linear_error_pfc==min(linear_error_pfc))
d_iso=which(linear_error_iso==min(linear_error_iso))
for (d in 1:Dmax){
Y=c(Y)
aux=lineal.junto.small.R(X,Y,K,d)
#aux=lineal.junto.small.R.more.classes(X,Y,K,d)
li=(aux$predict_lineal_pls)
li_pfc=(aux$predict_lineal_PFC)
li_iso=(aux$predict_lineal_iso)
linear_error_pls[d]=mean((li-Y)^2)
linear_error_pfc[d]=mean((li_pfc-Y)^2)
linear_error_iso[d]=mean((li_iso-Y)^2)
}
set.seed(11)
linear_error_pfc=NULL
linear_error_pls=NULL
linear_error_iso=NULL
set.seed(11)
for (d in 1:Dmax){
Y=c(Y)
aux=lineal.junto.small.R(X,Y,K,d)
#aux=lineal.junto.small.R.more.classes(X,Y,K,d)
li=(aux$predict_lineal_pls)
li_pfc=(aux$predict_lineal_PFC)
li_iso=(aux$predict_lineal_iso)
linear_error_pls[d]=mean((li-Y)^2)
linear_error_pfc[d]=mean((li_pfc-Y)^2)
linear_error_iso[d]=mean((li_iso-Y)^2)
}
### tomo los datos...
rm(list=ls())
library(caret)
library(readr)
library(matrixcalc)
library(chemometrics)
FTIR_Spectra_instant_coffee <-  read_csv("data/chapter7/coffee.csv")
source("examples/chapter7/pls_matrices.R")
source("examples/chapter7/lineal_with_R.R")
Y=(t(FTIR_Spectra_instant_coffee[2,2:57]))
Y=as.factor(Y)
Y=as.numeric(Y)
Y=Y-1
Y=matrix(Y,ncol=1)
xx=t(FTIR_Spectra_instant_coffee[3:288,2:57])
X=matrix(0,ncol=ncol(xx),nrow=nrow(xx))
for (i in 1:ncol(xx)){
for (j in 1:nrow(xx)){
X[j,i]=as.numeric(xx[j,i])
}
}
### Choose d with k=10 folds
Dmax=15
K=10
linear_error_pfc=NULL
linear_error_pls=NULL
linear_error_iso=NULL
set.seed(11)
for (d in 1:Dmax){
Y=c(Y)
aux=lineal.junto.small.R(X,Y,K,d)
#aux=lineal.junto.small.R.more.classes(X,Y,K,d)
li=(aux$predict_lineal_pls)
li_pfc=(aux$predict_lineal_PFC)
li_iso=(aux$predict_lineal_iso)
linear_error_pls[d]=mean((li-Y)^2)
linear_error_pfc[d]=mean((li_pfc-Y)^2)
linear_error_iso[d]=mean((li_iso-Y)^2)
}
d_pls=which(linear_error_pls==min(linear_error_pls))
d_pfc=which(linear_error_pfc==min(linear_error_pfc))
d_iso=which(linear_error_iso==min(linear_error_iso))
d_pls
d_pfc
d_iso
# Calculate the LOO error with these selected d's for the three methods.
aux_pls=lineal.junto.small.R(X,Y,nrow(X),d_pls[1])$predict_lineal_pls
aux_PFC=lineal.junto.small.R(X,Y,nrow(X),d_pfc[1])$predict_lineal_PFC
aux_iso=lineal.junto.small.R(X,Y,nrow(X),d_iso[1])$predict_lineal_iso
## LOESS Error (actual numbers for Table 7.1 for coffee)
plserr <- as.numeric(confusionMatrix(as.factor(aux_pls-1),as.factor(Y))$overall[1])
isoerr <- as.numeric(confusionMatrix(as.factor(aux_iso-1),as.factor(Y ))$overall[1])
pls.pfcerr <- as.numeric(confusionMatrix(as.factor(aux_PFC-1),as.factor(Y ))$overall[1])
cat("Dataset | PLS | ISO | PLS+PFC\n")
cat("Coffee  |", round(100.00*plserr,2), "|", round(100.00*isoerr,2), "|", round(100.00*pls.pfcerr,2))
#### Figure 7.2
Dmax=15
K=nrow(X)
AA=NULL
for (d in 1:Dmax){
aux_pls= lineal.junto.small.R(X,Y,nrow(X),d)$predict_lineal_pls
AA[d]=confusionMatrix(as.factor(aux_pls-1),as.factor(Y))$overall[1]
}
dim(AA)
length(AA)
XX=1:Dmax
grayPalette <- c("#555555", "#AAAAAA", "#717171", "#8D8D8D")
A<- data.frame(x=XX,y=AA)
ggplot2::ggplot(A, aes(x = x, y = y)) +
geom_point(alpha = 0.8, size = 4) +
geom_line() +
theme_bw() +
scale_color_manual(values=grayPalette) +
labs(x = "Number of components",
y = "Accuracy") +
theme(panel.grid = element_blank(),
axis.title = element_text(size=16)
)
######iso
reg=lm(X ~Y )
vec=eigen(cov(reg$residuals))$vectors[,1:d]
datos_proy_iso=X%*%vec
#pfc
d=3
dim(vec)
AUX=pls2_nipals(X ,Y ,d)$P[,1:d]
datos_proy=X%*%AUX
s0 <- dr(Y~datos_proy)
datos_proy_pfc=datos_proy%*%s0$evectors[,1]
library(mosaic)
library(ggplot2)
grayPalette <- c("#555555", "#AAAAAA", "#717171", "#8D8D8D")
dfp <- data.frame(X = datos_proy_pfc, Y = Y)
dfp$variety <- ifelse(dfp$Y==0, "robusta", "arabica")
dfp$alpha <- ifelse(dfp$Y == 0, 0.5, 1)
ggplot(dfp, aes(x = X, fill = variety, alpha = alpha)) +
geom_histogram(color = "black") +
theme_bw() +
scale_fill_manual(values=grayPalette) +
labs(x = "PFC projection",
y = "Number of cases") +
theme(panel.grid = element_blank(),
legend.position = c(0.9, 0.9),
legend.title = element_blank(),
axis.title = element_text(size=16),
legend.text = element_text(size = 13)
)  +
scale_alpha(guide = 'none')
?pls2_nipals
?aes
dfp <- data.frame(X = datos_proy_pfc, Y = Y)
dfp$variety <- ifelse(dfp$Y==0, "robusta", "arabica")
dfp$alpha <- ifelse(dfp$Y == 0, 0.5, 1)
ggplot(dfp, aes(x = X, fill = variety, alpha = alpha)) +
geom_histogram(color = "black") +
theme_bw() +
labs(x = "PFC projection",
y = "Number of cases") +
theme(panel.grid = element_blank(),
legend.position = c(0.9, 0.9),
legend.title = element_blank(),
axis.title = element_text(size=16),
legend.text = element_text(size = 13)
)  +
scale_alpha(guide = 'none')
##
dfp_proj <- as.data.frame(datos_proy)
dfp_proj$variety <- ifelse(dfp$Y==0, "robusta", "arabica")
##figure 7.3 a
ggplot(dfp_proj, aes(x = V1, y = V2, shape = variety, color = variety)) +
geom_point(alpha = 0.8, size = 4) +
theme_bw() +
scale_color_manual(values=grayPalette) +
labs(x = "First PLS projection",
y = "Second PLS projection") +
theme(panel.grid = element_blank(),
legend.position = c(0.9, 0.9),
legend.title = element_blank(),
axis.title = element_text(size=16),
legend.text = element_text(size = 13)
)
## Figure 7.2 colores
dfp_proj <- as.data.frame(datos_proy)
dfp_proj$variety <- ifelse(dfp$Y==0, "robusta", "arabica")
ggplot(dfp_proj, aes(x = V1, y = V2, shape = variety, color = variety)) +
geom_point(alpha = 0.8, size = 4) +
theme_bw() +
labs(x = "First PLS projection",
y = "Second PLS projection") +
theme(panel.grid = element_blank(),
legend.position = c(0.9, 0.9),
legend.title = element_blank(),
axis.title = element_text(size=16),
legend.text = element_text(size = 13)
)
# PLS
d=3
AUX=pls2_nipals(X ,Y ,d)$P[,1:d]
datos_proy=X%*%AUX
dfp_proj
dim(datos_proy)
datos_proy
datos_proy[,1]
# PFC
d=3
AUX=pls2_nipals(X ,Y ,d)$P[,1:d]
datos_proy=X%*%AUX
## Figure 7.3a
dfp_proj <- as.data.frame(datos_proy)
dfp_proj$variety <- ifelse(dfp$Y==0, "robusta", "arabica")
ggplot(dfp_proj, aes(x = V1, y = V2, shape = variety, color = variety)) +
geom_point(alpha = 0.8, size = 4) +
theme_bw() +
labs(x = "First PLS projection",
y = "Second PLS projection") +
theme(panel.grid = element_blank(),
legend.position = c(0.9, 0.9),
legend.title = element_blank(),
axis.title = element_text(size=16),
legend.text = element_text(size = 13)
)
dim(datos_proy)
length(Y==0)
length(Y!=0)
sum(Y==0)
sum(Y!=0)
27=29
27+29
datos_proy
#figure 7.3.c
#iso
d=Dmax
reg=lm(X ~Y )
vec=eigen(cov(reg$residuals))$vectors[,1:d]
datos_proy_iso=X%*%vec
dfp_proj_iso <- as.data.frame(datos_proy_iso)
dfp_proj_iso$variety <- ifelse(dfp$Y==0, "robusta", "arabica")
ggplot(dfp_proj_iso, aes(x = V1, y = V2, shape = variety, color = variety)) +
geom_point(alpha = 0.8, size = 4) +
theme_bw() +
labs(x = "First ISO projection",
y = "Second ISO projection") +
theme(panel.grid = element_blank(),
legend.position = c(0.9, 0.9),
legend.title = element_blank(),
axis.title = element_text(size=16),
legend.text = element_text(size = 13)
)
?one_hot
??one_hot
rm(list=ls())
library(caret)
source("examples/chapter7/lineal_with_R_more_classes.R")
source("examples/chapter7/pls_matrices.R")
library(readr)
library(mltools)
library(data.table)
library(caret)
library(readr)
FTIR_Spectra_olive_oils <- read_csv("data/chapter7/FTIR_Spectra_olive_oils.csv")
View(FTIR_Spectra_olive_oils)
rm(list=ls())
library(caret)
source("examples/chapter7/lineal_with_R_more_classes.R")
source("examples/chapter7/pls_matrices.R")
library(readr)
library(mltools)
library(data.table)
library(caret)
library(readr)
FTIR_Spectra_olive_oils <- read_csv("data/chapter7/FTIR_Spectra_olive_oils.csv")
Y=as.factor(t(FTIR_Spectra_olive_oils[2,2:121]))
Y_numeric=as.numeric(Y)
Y=matrix(Y_numeric,ncol=1)
xx=t(FTIR_Spectra_olive_oils[3:570,2:121])
X=matrix(0,ncol=ncol(xx),nrow=nrow(xx))
for (i in 1:ncol(xx)){
for (j in 1:nrow(xx)){
X[j,i]=as.numeric(xx[j,i])
}
}
Dmax=33
K=5
K=10
K=5
### elijo el d aca
error_lineal_PFC=NULL
error_lineal_pls=NULL
error_lineal_iso=NULL
set.seed(1)
for (d in 1:Dmax){
cat(", d = ", d)
aux=lineal.junto.small.R.more.classes(X,Y,K,d)
li=as.numeric(aux$predict_lineal_pls)
li_PFC=as.numeric(aux$predict_lineal_PFC)
li_iso=as.numeric(aux$predict_lineal_iso)
YY=as.numeric(Y)
error_lineal_pls[d]=mean((li-YY)^2)
error_lineal_PFC[d]=mean((li_PFC-YY)^2)
error_lineal_iso[d]=mean((li_iso-YY)^2)
}
rm(list=ls())
library(caret)
source("examples/chapter7/lineal_with_R_more_classes.R")
source("examples/chapter7/pls_matrices.R")
library(readr)
library(mltools)
library(data.table)
library(caret)
library(readr)
FTIR_Spectra_olive_oils <- read_csv("data/chapter7/FTIR_Spectra_olive_oils.csv")
#View(FTIR_Spectra_olive_oils)
Y=as.factor(t(FTIR_Spectra_olive_oils[2,2:121]))
Y_numeric=as.numeric(Y)
Y=matrix(Y_numeric,ncol=1)
xx=t(FTIR_Spectra_olive_oils[3:570,2:121])
X=matrix(0,ncol=ncol(xx),nrow=nrow(xx))
for (i in 1:ncol(xx)){
for (j in 1:nrow(xx)){
X[j,i]=as.numeric(xx[j,i])
}
}
Dmax=33
K=5
### elijo el d aca
error_lineal_PFC=NULL
error_lineal_pls=NULL
error_lineal_iso=NULL
set.seed(1)
for (d in 1:Dmax){
#cat(", d = ", d)
aux=lineal.junto.small.R.more.classes(X,Y,K,d)
li=as.numeric(aux$predict_lineal_pls)
li_PFC=as.numeric(aux$predict_lineal_PFC)
li_iso=as.numeric(aux$predict_lineal_iso)
YY=as.numeric(Y)
error_lineal_pls[d]=mean((li-YY)^2)
error_lineal_PFC[d]=mean((li_PFC-YY)^2)
error_lineal_iso[d]=mean((li_iso-YY)^2)
}
dim(xx)
rm(list=ls())
library(caret)
source("examples/chapter7/lineal_with_R_more_classes.R")
source("examples/chapter7/pls_matrices.R")
library(readr)
library(mltools)
library(data.table)
library(caret)
library(readr)
FTIR_Spectra_olive_oils <- read_csv("data/chapter7/FTIR_Spectra_olive_oils.csv")
Y=as.factor(t(FTIR_Spectra_olive_oils[2,2:121]))
Y_numeric=as.numeric(Y)
Y=matrix(Y_numeric,ncol=1)
xx=t(FTIR_Spectra_olive_oils[3:570,2:121])
dim(xx)
dim(Y)
xx[1:5, 1:5]
X=matrix(0,ncol=ncol(xx),nrow=nrow(xx))
for (i in 1:ncol(xx)){
for (j in 1:nrow(xx)){
X[j,i]=as.numeric(xx[j,i])
}
}
dim(X)
X[:5, :5]
X[1:5, 1:5]
Y[1:5, 1:5]
Y[1:5]
nrow(Y)
Y[nrow(Y)-4:nrow(Y)]
Y[(nrow(Y)-4):nrow(Y)]
X[(nrow(Y)-4):nrow(Y), (nrow(Y)-4):nrow(Y)]
X[23, 2]
dim(X)
X
X[nrow(X),]
