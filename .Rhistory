Edad[Sexo == 'Male' | Altura < 1.75]
Idx[Sexo == "Male"]
max(Altura[Sexo=="Male"])
min(Edad[Sexo=="Female"])
play()
read.table()
time <- c(0.25, 0.38, 0.82, 3.39, 18.44, 112.92)
memory <- c(29948, 30872, 36156, 61400, 193984, 914730)
bfts <- data.frame(time, memory)
bfts
time <- c(0,0,0,0)
bfts
time <- c(0.42, 1.93, 27.73, 701.63, NaN, NaN)
time
sum(time)
sum(time, na.rm=TRUE)
memory <- c(30168, 31816, 39732, 72376, NaN, NaN)
memory
bfgs <- data.frame(time, memory)
bfgs
bfts
time <- c(0.27, 0,25, 0.36, 0.25, 0.27, 0.18, 0.32, 0.28, 0.52, 0.46, 1.73, 0.37, 8.45)
time
time <- c(0.27, 0.25, 0.36, 0.25, 0.27, 0.18, 0.32, 0.28, 0.52, 0.46, 1.73, 0.37, 8.45)
time
memory <- c(29860, 29780, 29748, 29828, 29764, 29612, 29768, 29616, 29732, 29872, 29952, 29812, 29932)
memory
dfts <- data.frame(time, memory)
dfts
bfts
time <- c(0.26, 0.24, 0.21, 0.27, 0.24, 0.25, 0.32, 0.24, 0.63, 0.45, 2.13, 0.34, 11.06)
time
memory <- c(30072, 29752, 29728, 29920, 29880, 29780, 30168, 30028, 31832, 30896, 39476, 29964, 79928)
memory
dfgs <- data.frame(time, memory)
dfgs
size <- c(8,9,10,11,12,13,14,15,16,17,18,19,20)
time <- bfgs[time]
time <- bfgs$time
time
bfgs
memory <- bfgs$memory
memory
bfgs <- data.frame(size, time, memory)
memory
time
time <- c(0.42, 1.93,  27.73, 701.63,    NaN,    NaN,    NaN,    NaN,    NaN,    NaN,    NaN,    NaN,    NaN)
memory
memory <- c(30168, 31816, 39732, 72376,    NaN,    NaN,    NaN,    NaN,    NaN,    NaN,    NaN,    NaN,    NaN)
time
memory
size
bfgs <- data.frame(size, time, memory)
bfgs
time <- bfts$time
time
memory <- bfts$memory
memory
time <- c(0.25, 0.38, 0.82  ,3.39,  18.44, 112.92, NaN, NaN, NaN, NaN, NaN, NaN, NaN)
memory <- c(29948,  30872 , 36156 , 61400, 193984, 914730, NaN, NaN, NaN, NaN, NaN, NaN, NaN)
bfts <- c(size, time, memory)
bfgs
bfts
bfts <- data.frame(size, time, memory)
bfts
time <- dfgs$time
memory <- dfgs$memory
time
memory
dfgs <- data.frame(size, time, memory)
dfts <- data.frame(size, dfts$time, dfts$memory)
dfgs
dfts
time <- dfts$dfts.time
memory <- dfts$dfts.memory
time
memory
dfts <- data.frame(size, time, memory)
dfts
data.frame(size, time)
data.frame(size, dfts$time)
ggplot(aes(x=size))
matplot(data.frame(size, dfts$time))
matplot(dfts)
plot(dfts)
plot(x=dfts$size, y=dfts$time)
?plot
plot(x=dfts$size, y=dfts$time, type="l")
plot(x=size, y=dfts$time, type="l")
lines(x=size, y=dfgs$time, type="l")
lines(x=size, y=dfgs$time, type="l", col="red")
bfgs
lines(x=size, y=bfts, type="l", col="blue")
lines(x=size, y=bfts$time, type="l", col="blue")
plot(x=size, y=bfts$time, type="l", col="blue")
plot(x=size, y=bfgs$time, type="l", col="blue")
lines(x=size, y=bfts$time, type="l", col="red")
lines(x=size, y=dfgs$time, type="l", col="red")
lines(x=size, y=dfts$time, type="l", col="red")
plot(x=size, y=bfgs$time, type="l", col="black")
lines(x=size, y=dfts$time, type="l", col="red")
lines(x=size, y=dfgs$time, type="l", col="blue")
lines(x=size, y=bfts$time, type="l", col="purple")
lines(x=size, y=bfts$time, type="l", col="orange")
source('~/Desktop/CSCI 4511W/writ1/plot.r')
source('~/Desktop/CSCI 4511W/writ1/plot.r')
source('~/Desktop/CSCI 4511W/writ1/plot.r')
?legend
source('~/Desktop/CSCI 4511W/writ1/plot.r')
source('~/Desktop/CSCI 4511W/writ1/plot.r')
source('~/Desktop/CSCI 4511W/writ1/plot.r')
source('~/Desktop/CSCI 4511W/writ1/plot.r')
source('~/Desktop/CSCI 4511W/writ1/plot.r')
source('~/Desktop/CSCI 4511W/writ1/plot.r')
source('~/Desktop/CSCI 4511W/writ1/plot.r')
source('~/Desktop/CSCI 4511W/writ1/plot.r')
source('~/Desktop/CSCI 4511W/writ1/plot.r')
source('~/Desktop/CSCI 4511W/writ1/plot.r')
source('~/Desktop/CSCI 4511W/writ1/plot.r')
source('~/Desktop/CSCI 4511W/writ1/plot.r')
source('~/Desktop/CSCI 4511W/writ1/plot.r')
source('~/Desktop/CSCI 4511W/writ1/plot.r')
source('~/Desktop/CSCI 4511W/writ1/plot.r')
source('~/Desktop/CSCI 4511W/writ1/plot.r')
source('~/Desktop/CSCI 4511W/writ1/plot.r')
source('~/Desktop/CSCI 4511W/writ1/plottest.r')
source('~/Desktop/CSCI 4511W/writ1/plot.r')
source('~/Desktop/CSCI 4511W/writ1/plottest.r')
source('~/Desktop/CSCI 4511W/writ1/plot.r')
source('~/Desktop/CSCI 4511W/writ1/plot.r')
source('~/Desktop/CSCI 4511W/writ1/plot.r')
source('~/Desktop/CSCI 4511W/writ1/plot.r')
source('~/Desktop/CSCI 4511W/writ1/plot.r')
bfgs$memory
bfgs$memory/1024
source('~/Desktop/CSCI 4511W/writ1/plot2.r')
source('~/Desktop/CSCI 4511W/writ1/plot2.r')
source('~/Desktop/CSCI 4511W/writ1/plot2.r')
source('~/Desktop/CSCI 4511W/writ1/plot2.r')
dfts$memory
source('~/Desktop/CSCI 4511W/writ1/plot.r')
plot(x=size, y=bfgs$time, log="y", type="l", col="black", ylim=c(0,700), ylab="Time (s)", xlab="Problem Size")
source('~/Desktop/CSCI 4511W/writ1/plot.r')
?plot
source('~/Desktop/CSCI 4511W/writ1/plot.r')
quit()
pwd
install.packages("devtools")
install.packages("roxygen2")
install.packages("xml")
install.packages("xml2")
install.packages("devtools")
install.packages("roxygen2")
x = 0
x = 1
x/2
x//2
round(x/2)
round(x/1.5)
floor(x/1/5)
floor(x/1.5)
?mod
?%
??mod
?modulus
x%%2
x%%1
m <- matrix(0, 4,5)
m
m[1,4]
m[,4]
m[1,]
m[-1,]
1:4
4:1
id <- matrix(data=0, nrow=x, nrow=y)
for (i in 1:floor(y/2)) {
for (j in 1:x) {
id[i,j] = sample(0:1,1)
}
}
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
generate_identicon(4,8)
generate_identicon(4,8)
source('~/.active-rstudio-document')
generate_identicon(x,y)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
matrix(data=0, nrow=x, ncol=y)
matrix(data=0, x, y)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
id
source('~/.active-rstudio-document')
id
source('~/.active-rstudio-document')
id
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
id
source('~/.active-rstudio-document')
install.packages('png')
library(png)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
r
display(r)
install.packages('plotly')
library(plotly)
fig <- r
id
fig <- plot_ly(type="image", z=r)
fig
source('~/.active-rstudio-document')
id
fig <- plot_ly(type="image", z=r)
fig
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
id
source('~/.active-rstudio-document')
id
library(devtools)
packageVersion("devtools")
update.packages("devtools")
packageVersion("devtools")
update.packages()
y
y
install.packages("devtools")
install.packages("devtools")
packageVersion("devtools")
create_package(file.choose())
library(devtools)
create_package(file.choose())
create_package(file.choose(new=TRUE))
create_package(choose.dir())
??choose.dir
create_package(tk_choose.dir())
install.packages("tcltk")
library(tcltk)
create_package(tk_choose.dir())
create_package(tk_choose.dir(getwd()))
library(mypackage)
detach("package:mypackage", unload = TRUE)
remove.packages("mypackage", lib="~/R/x86_64-pc-linux-gnu-library/3.6")
getwd()
create_package()
devtools::create_package("plsoci")
library(devtools)
create_package("plsoci")
getwd()
library(devtools)
create_package("plsoci")
getwd()
quit()
ent
ent <- function(a,b) {
if (a == 0 || b == 0) {
return 0
ent <- function(a,b) {
if (a == 0 || b == 0) {
return (0)
}
return (-(a/(a+b)) * log(a/(a+b), 2) - (b/(a+b)) * log(b/(a+b), 2))
}
ent(1,0)
ent(1,1)
ent(1,2)
ent(2,2)
ent(2,3)
ent(2,1000)
ent(2,1)
ent(1,1)
quit()
ent(1,2)
quit()
facotrial(6)
factorial(6)
factorial(6) * choose(9,5)
choose(9,5)
2*8*7*6*5*4
13440*6
10*9*8*7*6*5 - 8*7*6*5*4*3 - 13440
10*9*8*7*6*5 - 8*7*6*5*4*3
quit()
6*6*4
quit()
choose(7,1)
choose(7,1) * choose(15,4)
choose(7,1) + choose(15,4)
permutate(6,5)
perm(6,5)
e(1,1)
ent(1,1)
clear
permutations(24,4)
quit
quit()
x <- (2+2*sqrt(2))
x
y <- sqrt(3+2*sqrt(2))
y
x/y
2+2*sqrt(2)
quit()
choose(10,5)
2*choose(10,5)
2*choose(10,5) + choose(10,6)
factorial(12)/factorial(6)
factorial(11)/factorial(5)
7*factorial(11)/factorial(5)
7*factorial(11)/factorial(6)
choose(5,3)
choose(7,3)
choose(11,6)
factorial(11)/(factorial(5))
factorial(11)/(factorial(6))
factorial(11)/factorial(5)
factorial(11)/factorial(7)
factorial(11)/factorial(8)
factorial(12)/factorial(6)
factorial(12)/factorial(7)
factorial(12)/factorial(8)
factorial(12)/factorial(9)
factorial(7)/factorial(6)
2*choose(11,6)-choose(10,6)
choose(12,4)
quit()
0.75*120
quit()
rm(list=ls())
library(pls)
#parameters in meat
setwd("~/Dropbox/pls-book/PLSbook/Data-analysis/mvc1_data_Frabricio/mvc1_data/Parameters in meat")
setwd("~/PLSLib/mvc1_data/Parameters in meat")
ycal <- read.table("y3cal.txt", quote="\"", comment.char="")
ytest <- read.table("y3test.txt", quote="\"", comment.char="")
Xcal <-  read.table("Xcal.txt", quote="\"", comment.char="")
Xtest <- read.table("Xtest.txt", quote="\"", comment.char="")
library(glmnet)
library(MASS)
x=t(Xcal)
xx=t(Xtest)
y=ycal$V1
xx_cent=scale(matrix(xx,ncol=ncol(xx)),center=apply(x,2,mean),scale=TRUE)
x_cent=scale(x,center=TRUE,scale=FALSE)
w = ginv(t(x_cent) %*% x_cent) %*% t(x_cent) %*% (y-mean(y))
pred_ols = xx_cent %*% w + mean(y)
set.seed(1)
pls_fit = plsr(y~x, scale = TRUE, validation = "CV")
summary(pls_fit)
pls_fit = plsr(y~x, scale = FALSE, validation = "CV")
summary(pls_fit)
pls_fit = plsr(y~x, scale = FALSE, validation = "CV")
summary(pls_fit)
help(plsr)
pls_fit = plsr(y~x, scale = FALSE)
pls_fit$loadings
pls_fit = plsr(y~x, scale = FALSE, validation = "CV")
pls_fit$ncomp
clear
setwd("~/PLSLib")
rm(list=ls())
library(pls)
# Load in moisture in corn data
ycal <- read.table("mvc1_data/Parameters in corn/y1cal.txt", quote="\"", comment.char="")
ytest <- read.table("mvc1_data/Parameters in corn/y1test.txt", quote="\"", comment.char="")
Xcal <-  read.table("mvc1_data/Parameters in corn/Xcal.txt", quote="\"", comment.char="")
Xtest <- read.table("mvc1_data/Parameters in corn/Xtest.txt", quote="\"", comment.char="")
library(glmnet)
library(MASS)
x=t(Xcal)
xx=t(Xtest)
y=ycal$V1
pls_fit = plsr(y~x, scale = FALSE, validation = "CV", segment.type="consecutive")
pls_fit$ncomp
summary(pls_fit)
pls_fit$model
pls_fit = plsr(y~x, scale = FALSE, validation = "CV", segment.type="consecutive")
names(pls_fit)
pls_fit$call
summary(pls_fit)
pls_fit$validation
pls_fit$validation$adj
pls_fit$validation$adj.min
which.min(pls_fit$validation$adj)
rm(list=ls())
library(pls)
# Load in moisture in corn data
ycal <- read.table("mvc1_data/Parameters in corn/y1cal.txt", quote="\"", comment.char="")
ytest <- read.table("mvc1_data/Parameters in corn/y1test.txt", quote="\"", comment.char="")
Xcal <-  read.table("mvc1_data/Parameters in corn/Xcal.txt", quote="\"", comment.char="")
Xtest <- read.table("mvc1_data/Parameters in corn/Xtest.txt", quote="\"", comment.char="")
library(glmnet)
library(MASS)
x=t(Xcal)
xx=t(Xtest)
y=ycal$V1
pls_fit = plsr(y~x, scale = FALSE, validation = "CV", segment.type="consecutive")
summary(pls_fit)
validationplot(pls_fit, val.type = "MSEP")
best_ncomp <- which.min(pls_fit$validation$adj)
gas <- plsr(y~x, ncomp=best_ncomp)
new=data.frame(x=xx)
new=t(data.frame(x=Xtest))
p=predict(gas,newdata=new)[,,ncomp]
pred_pls=p
plot(ytest,pred_pls,xlab="Observed response, Y",ylab="Predicted response")
pls_fit = plsr(y~x, scale = FALSE, validation = "CV", segment.type="consecutive")
summary(pls_fit)
validationplot(pls_fit, val.type = "MSEP")
pls_fit = plsr(y~x, scale = FALSE, validation = "CV", segment.type="consecutive")
summary(pls_fit)
best_ncomp <- which.min(pls_fit$validation$adj)
gas <- plsr(y~x, ncomp=best_ncomp)
new=data.frame(x=xx)
new=t(data.frame(x=Xtest))
p=predict(gas,newdata=new)[,,best_ncomp]
pred_pls=p
plot(ytest,pred_pls,xlab="Observed response, Y",ylab="Predicted response")
ytest
pred_pls
c(pred_pls)
new=data.frame(x=xx)
new=t(data.frame(x=Xtest))
p=predict(gas,newdata=new)[,,best_ncomp]
pred_pls=p
plot(ytest,pred_pls,xlab="Observed response, Y",ylab="Predicted response")
p
str(ytest)
str(p)
ytest$V1
ytest<-ytest$V1
plot(ytest,pred_pls,xlab="Observed response, Y",ylab="Predicted response")
rm(list=ls())
library(pls)
library(glmnet)
library(MASS)
# Load in moisture in corn data
ycal <- read.table("mvc1_data/Parameters in corn/y1cal.txt", quote="\"", comment.char="")
ytest <- read.table("mvc1_data/Parameters in corn/y1test.txt", quote="\"", comment.char="")
Xcal <-  read.table("mvc1_data/Parameters in corn/Xcal.txt", quote="\"", comment.char="")
Xtest <- read.table("mvc1_data/Parameters in corn/Xtest.txt", quote="\"", comment.char="")
x=t(Xcal)
xx=t(Xtest)
y=ycal$V1
# Cross validate for moisture in corn data
pls_fit = plsr(y~x, scale = FALSE, validation = "CV", segment.type="consecutive")
summary(pls_fit)
# Find best number of components to use acording to CV
best_ncomp <- which.min(pls_fit$validation$adj)
# Train model on best ncomps
gas <- plsr(y~x, ncomp=best_ncomp)
new=data.frame(x=xx)
new=t(data.frame(x=Xtest))
# Predict using best model
p=predict(gas,newdata=new)[,,best_ncomp]
pred_pls=p
ytest=ytest$V1
# Plot predicted vs observed responses regarding moisture in corn
plot(ytest,pred_pls,xlab="Observed response, Y",ylab="Predicted response")
# Load in protein in meat data
ycal <- read.table("mvc1_data/Parameters in meat/y3cal.txt", quote="\"", comment.char="")
ytest <- read.table("mvc1_data/Parameters in meat/y3test.txt", quote="\"", comment.char="")
Xcal <-  read.table("mvc1_data/Parameters in meat/Xcal.txt", quote="\"", comment.char="")
Xtest <- read.table("mvc1_data/Parameters in meat/Xtest.txt", quote="\"", comment.char="")
x=t(Xcal)
xx=t(Xtest)
y=ycal$V1
# Cross validate for protein in meat data
pls_fit = plsr(y~x, scale = FALSE, validation = "CV", segment.type="consecutive")
summary(pls_fit)
# Find best number of components to use acording to CV
best_ncomp <- which.min(pls_fit$validation$adj)
# Train model on best ncomps
gas <- plsr(y~x, ncomp=best_ncomp)
new=data.frame(x=xx)
new=t(data.frame(x=Xtest))
# Predict using best model
p=predict(gas,newdata=new)[,,best_ncomp]
pred_pls=p
ytest=ytest$V1
# Plot predicted vs observed responses regarding protein in meat
plot(ytest,pred_pls,xlab="Observed response, Y",ylab="Predicted response")
# Load in tetracycline data
ycal <- read.table("mvc1_data/Tetracycline in serum/ycal.txt", quote="\"", comment.char="")
ytest <- read.table("mvc1_data/Tetracycline in serum/ytest.txt", quote="\"", comment.char="")
Xcal <-  read.table("mvc1_data/Tetracycline in serum/Xcal.txt", quote="\"", comment.char="")
Xtest <- read.table("mvc1_data/Tetracycline in serum/Xtest.txt", quote="\"", comment.char="")
x=t(Xcal)
xx=t(Xtest)
y=ycal$V1
# Cross validate for tetracycline in serum data
pls_fit = plsr(y~x, scale = FALSE, validation = "CV", segment.type="consecutive")
summary(pls_fit)
# Find best number of components to use acording to CV
best_ncomp <- which.min(pls_fit$validation$adj)
# Train model on best ncomps
gas <- plsr(y~x, ncomp=best_ncomp)
new=data.frame(x=xx)
new=t(data.frame(x=Xtest))
# Predict using best model
p=predict(gas,newdata=new)[,,best_ncomp]
pred_pls=p
ytest=ytest$V1
# Plot predicted vs observed responses regarding tetracycline in serum
plot(ytest,pred_pls,xlab="Observed response, Y",ylab="Predicted response")
!clear
